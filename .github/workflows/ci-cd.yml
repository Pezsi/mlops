name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  MLFLOW_TRACKING_URI: file:./mlruns

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 pylint

      - name: Run Black
        run: black --check .
        continue-on-error: true

      - name: Run Flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

      - name: Run Pylint
        run: |
          pip install -r requirements.txt
          pylint **/*.py --exit-zero
        continue-on-error: true

  # Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Create necessary directories
        run: |
          mkdir -p data models mlruns logs

      - name: Download dataset
        run: |
          if [ ! -f data/winequality-red.csv ]; then
            curl -o data/winequality-red.csv \
              https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv
          fi

      - name: Run pytest
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Model Training and Validation
  train-model:
    name: Train and Validate Model
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create necessary directories
        run: |
          mkdir -p data models mlruns logs

      - name: Download dataset
        run: |
          if [ ! -f data/winequality-red.csv ]; then
            curl -o data/winequality-red.csv \
              https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv
          fi

      - name: Train model
        run: |
          python main.py
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}

      - name: Upload model artifacts
        uses: actions/upload-artifact@v3
        with:
          name: model-artifacts
          path: |
            models/
            mlruns/
          retention-days: 30

  # Docker Build and Test
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build main application image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: wine-quality-mlops:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Streamlit monitoring image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.streamlit
          push: false
          tags: wine-quality-streamlit:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Airflow image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./airflow/Dockerfile.airflow
          push: false
          tags: wine-quality-airflow:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests with Docker Compose
  docker-integration-test:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create necessary directories
        run: |
          mkdir -p data models mlruns logs

      - name: Download dataset
        run: |
          if [ ! -f data/winequality-red.csv ]; then
            curl -o data/winequality-red.csv \
              https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv
          fi

      - name: Start services
        run: |
          docker-compose up -d mlflow-api
          sleep 20

      - name: Test MLflow API
        run: |
          curl -f http://localhost:5000 || exit 1
          curl -f http://localhost:8000/docs || exit 1

      - name: Test predictions endpoint
        run: |
          curl -X POST http://localhost:8000/predict \
            -H "Content-Type: application/json" \
            -d '{
              "fixed_acidity": 7.4,
              "volatile_acidity": 0.7,
              "citric_acid": 0.0,
              "residual_sugar": 1.9,
              "chlorides": 0.076,
              "free_sulfur_dioxide": 11,
              "total_sulfur_dioxide": 34,
              "density": 0.9978,
              "pH": 3.51,
              "sulphates": 0.56,
              "alcohol": 9.4
            }' || exit 1

      - name: Stop services
        run: docker-compose down

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Deployment (conditional)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [train-model, docker-integration-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download model artifacts
        uses: actions/download-artifact@v3
        with:
          name: model-artifacts

      - name: Deploy notification
        run: |
          echo "Deployment step - configure your deployment strategy here"
          echo "Options: AWS SageMaker, Azure ML, GCP Vertex AI, Kubernetes, etc."

      # Add your deployment steps here
      # Example for AWS:
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-1

      # - name: Push to ECR
      #   run: |
      #     aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
      #     docker tag wine-quality-mlops:latest $ECR_REGISTRY/wine-quality-mlops:${{ github.sha }}
      #     docker push $ECR_REGISTRY/wine-quality-mlops:${{ github.sha }}

  # Performance Monitoring Alert
  monitoring-check:
    name: Model Performance Check
    runs-on: ubuntu-latest
    needs: train-model
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download model artifacts
        uses: actions/download-artifact@v3
        with:
          name: model-artifacts

      - name: Check model performance
        run: |
          echo "Checking model performance metrics..."
          # Add logic to check if model meets performance thresholds
          # Example: Check RÂ² score, RMSE, etc.

      - name: Create monitoring report
        run: |
          echo "Model training completed at $(date)"
          echo "Review metrics in MLflow UI"
